<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>DB on kona4 Blog</title>
    <link>https://kona4.com/tags/db/</link>
    <description>Recent content in DB on kona4 Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 03 Mar 2024 09:02:04 +0900</lastBuildDate>
    <atom:link href="https://kona4.com/tags/db/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>DBトランザクションの分離レベルについて</title>
      <link>https://kona4.com/post/2024/03/db_transaction/</link>
      <pubDate>Sun, 03 Mar 2024 09:02:04 +0900</pubDate>
      <guid>https://kona4.com/post/2024/03/db_transaction/</guid>
      <description>復数のトランザクションが同時に実行されるとき、それらのトランザクションがどのように相互作用するかを定義するのが分離レベル。&#xA;本来は直列実行すれば並行で実行することの問題が解決できるが、サービスは複数人が同時に使うのが一般的なのでアプリケーション全体のパフォーマンスを考えるとそれは現実的じゃなさそう。（「誰かが実行中なのでお待ちください。」はやばい）&#xA;並行で実行されるときの問題 1つのトランザクションが別のトランザクションで変更されているデータを読み取ること。 2つ以上のトランザクションが同じデータを同時に変更すること。 トランザクション分離レベル 問題に対し、ある部分に関しては許容する。と段階的に定義しているものがトランザクション分離レベル。&#xA;リードアンコミッティド（Read uncommitted） リードコミッティド（Read committed） リピータブルリード（Repeatable read） シリアライザブル（Serializable） PostgreSQLのデフォルトのトランザクション分離レベルは「リードミコッティド」&#xA;PostgreSQLで発生しうること リードコミッティドの場合、以下の3つが発生しうる。&#xA;反復不可能読み取り（Nonrepeatable Read）（ファジーリードと読んでいる記事もある fuzzy = 曖昧な、ぼんやりした） ファントムリード（Phantom Read） 直列化異常（Serialization Anomaly） ダーティーリードは起きない。&#xA;反復不可能読み取り 一度読み取ったデータを他のトランザクションが変更することで、同じデータを読み取ったとしても異なる値が読み取られること。&#xA;ファントムリード トランザクションが複数行のある集合を返す検索条件で問い合わせを行ったあと、別のトランザクションのコミットが行われることで、同じ検索条件で問い合わせを行ったとしても異なる行が返されること。&#xA;直列化異常 復数のトランザクションがコミットされたあとの結果が、トランザクションを直列化した場合の結果と異なること。(＝直列で実行した場合は正常に値が反映されるが、並列で実行した場合は異なる値になること)&#xA;業務で遭遇したこと PostgreSQLでは、トランザクション分離レベルをリードアンコミッティド（デフォルトのひとつ下で、もっとも下のレベル）にしたとしても、ファントムリードが発生しない。つまりほかトランザクションのコミット前のデータを読み取ることがない。&#xA;上記の挙動をするため、他トランザクションでコミットされるデータを読み取らず、自トランザクションでコミットしようとしたときに、Unique制約に引っかかったことがある。（自トランザクションのコミットは他トランザクションのあと）&#xA;トランザクション分離レベルと発生しうる問題を理解していると当然の挙動と理解できる。&#xA;参考 https://qiita.com/WebEngrChild/items/e85d0762c1383e353349 https://zenn.dev/bellwood4486/articles/postgresql-trans-iso-level https://www.postgresql.jp/docs/11/transaction-iso.html </description>
    </item>
    <item>
      <title>DBの正規化について</title>
      <link>https://kona4.com/post/2022/06/regularization/</link>
      <pubDate>Sat, 04 Jun 2022 08:58:58 +0900</pubDate>
      <guid>https://kona4.com/post/2022/06/regularization/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.amazon.co.jp/%E9%81%94%E4%BA%BA%E3%81%AB%E5%AD%A6%E3%81%B6DB%E8%A8%AD%E8%A8%88-%E5%BE%B9%E5%BA%95%E6%8C%87%E5%8D%97%E6%9B%B8-%E5%88%9D%E7%B4%9A%E8%80%85%E3%81%A7%E7%B5%82%E3%82%8F%E3%82%8A%E3%81%9F%E3%81%8F%E3%81%AA%E3%81%84%E3%81%82%E3%81%AA%E3%81%9F%E3%81%B8-%E3%83%9F%E3%83%83%E3%82%AF/dp/4798124702&#34;&gt;達人に学ぶDB設計徹底指南書&lt;/a&gt;を読み、第3章〜第5章に書かれている、DBの正規化、そのメリットデメリットについてまとめました。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
